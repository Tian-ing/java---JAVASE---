集合：
	Java 集合就像一种容器，可以把多个对象的引用放入容器中。
	1.Collection接口
		Collection是集合的顶层接口，Set接口和List接口是Collection的子接口
		集合判断元素是否相等，使用的是元素的equals方法
		方法:
					size() :返回集合中元素的个数。
					add(E e) :添加元素到集合中
					addAll(Collection c):添加集合到集合中（把集合的元素添加到集合中） 
					clear() :移除集合中的所有的元素
					isEmpty():判断集合中的元素是否为空
					contains(Object o) :判断集合中是否包含指定元素
					remove(Object o) ：移除指定元素
					toArray() :返回包含此 collection 中所有元素的数组,返回值类型是 Object[]
					iterator() : 返回在此 collection 的元素上进行迭代的迭代器。返回值类型是 Iterator
	2.Iterator接口:
		作用:可以迭代元素(遍历元素)
		方法:
					hasNext():判断是否有下一个元素
					next():指向下一个元素	
		 
		 如：
			Collection coll = new ArrayList(); 
			coll.add(3);
			coll.add("aa");
			coll.add("tom");
			//遍历元素
			Iterator it = coll.iterator();
			while(it.hasNext()){
				Object obj = it.next();
				System.out.println(obj);
			}
	3.增强for循环(foreach)
		格式:
			for(变量类型 变量名:集合或数组){
				System.out.println(变量名);
			}
			
	4.Set接口
		Set接口是Collection的子接口
		Set集合特点:
			元素是无序的，不能重复的。
		典型的实现类:
			HashSet:
				HashSet特点：
					不能保证元素的排列顺序
					HashSet 不是线程安全的
					集合元素可以是 null
					
				HashSet在判断集合元素是否相等，使用的元素equals方法，在存储的时候， 使用的元素的hashCode方法
				当equals方法返回值为true，那么hashCode方法返回值应该相等，如果为false，应该不相等
				在开发中生成equals和hashCode方法即可
				
			LinkedHashSet：
				是HashSet的子类，使得元素看起来是以插入顺序保存的
			
			
		set集合的遍历方式   1.使用迭代器   2.使用增强for循环
	5.List接口
		List接口是Collection的子接口
		List集合特点：
			元素是有序的，且可以重复的。
		方法：
		   get(int index) : 返回列表中指定位置的元素。
		   set(int index, E element) :用指定元素替换列表中指定位置的元素
		   subList(int fromIndex, int toIndex) :返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。返回类型为List
			
		典型的实现类ArrayList
			ArrayList  vs  Vector(了解)
			Vector是一个古老的集合，通常建议使用 ArrayList
			ArrayList 是线程不安全的，而 Vector 是线程安全的。
			即使为保证 List 集合线程安全，也不推荐使用 Vector
			
		List集合的遍历方式  1.使用迭代器    2.使用增强for循环    3.可以使用普通for循环
	6.可变参数列表:
		格式: 类型... 参数名
			如：
			public void test(int... args){
			
			} 
			调用的时候
			test(1,2,3);//可以传入不固定的整数，即使空参也可以.
			
		可变参数列表，其实就是数组
			public void test(int[] args){   //与这个是一致
			
			} 
			所以可变参数列表像数组那样处理即可
			如：
			public void test(int... args){
				for(int i = 0;i<args.length;i++){
					System.out.println(args[i]);
				}
			} 
			
		注意点：
			1.当方法中有多个参数的时候，参数列表应该放在最后。
			2.当和其他的方法构成重载的时候，那么会调用更加精准的参数的方法。
			
		Arrays工具类
			asList(T... a) :这个就是一个参数列表，可以传入不固定的个数参数.返回的是一个List类型，但是这个实现类的类型实际上是Arrays的内部类的类型
			如：List list = Arrays.asList(1,2,3,"ab");
	7.泛型
		1.泛型
			泛型的作用：就是限定集合的元素的类型的.
			当集合没有泛型的时候，会导致集合可以随意添加各种类型元素，不安全，之后处理起来得需要强转，不方便...
			
		2.自定义泛型类
			如：
			class Person<T>{   //T：泛型类型，在类中使用类型的地方几乎都是使用该泛型类型
				
				public void set(T t){
				
				}
				
				public T get(){
					return null;
				}
				
			}
		3泛型方法:
				//泛型方法:(即使不在泛型类，也可以定义泛型方法)
				/**<T>:声明该方法是泛型方法:在方法中凡是可以使用类型的，几乎都可以使用T
				 * 格式: 权限修饰符 <T> 返回值类型  方法名(){} 
				 */
				public <E> E genericsMethod(E i){
					return null;
				}
		4.泛型的通配符:
			//泛型类型可以为任意类型
			public void test1(List<?> list){}
			//泛型类型可以为Person或Person子类的类型
			public void test2(List<? extends Person> list){}
			//泛型类型可以为Person或Person父类的类型
			public void test3(List<? super Person> list){}
		
	8.Map接口
		Map是一个集合。
		Map用来存放键值对的。
		方法:
					put(K key, V value) ：向集合中添加键值对。
					clear() :清除所有的键值对
					containsKey(Object key) :是否包含指定的key
					containsValue(Object value) ：是否包含指定的value
					get(Object key) :通过指定的key得到value
					isEmpty() ：判断集合的元素(键值对)是否为空
					keySet() : 获取所有的key，返回Set集合
					remove(Object key) :通过指定key，移除此键值对
					size() :获取集合中的键值对的个数
					values() ：获取所有的value,返回Collection集合
					entrySet() :返回包含键值对的Set集合 
					
					
			 Map集合遍历方式:
				// 键值对类型（Map.Entry）  变量名 ：包含键值对的Set集合(map.entrySet())
				for(Map.Entry<String, Integer> entry:map.entrySet()){
					//entry.getKey() :获取key        entry.getValue() :获取value
					System.out.println(entry.getKey()+"----"+entry.getValue());
				}
		Map集合的特点:
			Map集合的key，是无序的，是不可重复的。
		
		典型实现类:HashMap
				特点：是无序的，元素不可重复的。
					根据key的equals方法判断是否相等，在保存的时候，是根据key的hashCode方法进行 保存
					HashMap中的key和HashSet中的元素特点一致.
		 
		 实现类:Hashtable
				这个一个古老的集合类.
				HashMap  vs Hashtable
					Hashtable 是一个古老的 Map 实现类，不建议使用
					Hashtable 是一个线程安全的 Map 实现，但 HashMap 是线程不安全的。
					Hashtable 不允许使用 null 作为 key 和 value，而 HashMap 可以
					
		实现类LinkedHashMap:
				是HashMap的子类
				可以使集合的key看起来是以插入的顺序保存的
				
	9.Properties类
		是Hashtable的子类，但是我们不会像使用集合那样使用Properties类
		Properties可以操作属性文件(.properties)
		
		准备工作:在src下创建test.properties,文件内容如下:
		username=tom
		password=123
		
		使用Properties操作属性文件步骤
			1.创建Properties对象
			Properties pro = new Properties();
			2.加载属性文件
			pro.load(new FileInputStream("src/test.properties"));
			3.调用getProperty，通过key获取value
			String user = pro.getProperty("username");   //就能获取到tom这个value
	10.集合的工具类Collections
		方法:
					reverse(List<?> list) :反转List集合元素
					shuffle(List<?> list) :对List集合进行随机排序
					sort(List<T> list) :可以对List集合进行排序
					swap(List<?> list, int i, int j) :对List集合交换值
					max(Collection<? extends T> coll) :求出集合的最大值
					min(Collection<? extends T> coll) :求出集合的最小值
					提供了大量synchronizedXXX的方法，解决线程安全问题